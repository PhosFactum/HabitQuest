import logging

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from sleep.reminders import set_sleep_reminder
from sleep.advice import get_sleep_advice
from workout.generator import generate_workout
from keyboards import main_menu_keyboard, workout_levels_keyboard
from database import save_workout, get_user_workouts

# FSM states for sleep time input
class SleepStates(StatesGroup):
    waiting_for_sleep_time = State()


def register_handlers(dp):
    # Command handlers
    dp.message.register(send_welcome, Command("start"))
    dp.message.register(handle_sleep_command, Command("sleep"))
    dp.message.register(handle_train_command, Command("train"))
    dp.message.register(handle_my_trainings, Command("mytrainings"))

    # Text buttons
    dp.message.register(handle_sleep_text, F.text == "üõå –°–æ–Ω")
    dp.message.register(process_sleep_time, StateFilter(SleepStates.waiting_for_sleep_time))
    dp.message.register(handle_train_text, F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    dp.message.register(handle_advice, F.text == "‚ÑπÔ∏è –°–æ–≤–µ—Ç")
    dp.message.register(handle_my_trainings_button, F.text == "üìñ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

    # Callback query for workout level selection
    dp.callback_query.register(handle_level_callback, F.data.startswith("level_"))


# Handlers implementations
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî HabitQuest, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ó–û–ñ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

async def handle_sleep_command(message: Message, state: FSMContext):
    await handle_sleep_text(message)

async def handle_train_command(message: Message):
    await handle_train_text(message)

async def handle_my_trainings(message: Message):
    await handle_my_trainings_button(message)

async def handle_sleep_text(message: Message):
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ñ–µ–ª–∞—é —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ üò¥")
    # Ask for sleep time or set default
    await set_sleep_reminder(message)

async def process_sleep_time(message: Message, state: FSMContext):
    await set_sleep_reminder(message, message.text)
    await state.clear()

async def handle_train_text(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=workout_levels_keyboard()
    )

async def handle_advice(message: Message):
    advice = get_sleep_advice()
    await message.answer(f"–°–æ–≤–µ—Ç –ø–æ —Å–Ω—É: {advice}")

async def handle_my_trainings_button(message: Message):
    workouts = get_user_workouts(message.from_user.id)

    if not workouts:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí§")
        return

    response = "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for date, level, exercises in workouts:
        response += (
            f"üìÖ {date}\n"
            f"üî∏ –£—Ä–æ–≤–µ–Ω—å: {level.title()}\n"
            f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n{exercises}\n\n"
        )

    await message.answer(response.strip())

async def handle_level_callback(callback: CallbackQuery):
    level_mapping = {
        "level_easy": "–ª—ë–≥–∫–∞—è",
        "level_medium": "—Å—Ä–µ–¥–Ω—è—è",
        "level_hard": "—Ç—è–∂—ë–ª–∞—è"
    }
    selected_level = level_mapping.get(callback.data)
    workout = generate_workout(level=selected_level)

    save_workout(
        user_id=callback.from_user.id,
        level=selected_level,
        exercises=workout
    )

    await callback.message.answer(f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({selected_level.title()}):\n{workout}")
    await callback.answer()
