import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN
from sleep.reminders import set_sleep_reminder
from sleep.advice import get_sleep_advice
from workout.generator import generate_workout
from keyboards import main_menu_keyboard, workout_levels_keyboard
from database import init_db, save_workout, get_user_workouts
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

logging.basicConfig(level=logging.INFO)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
class SleepStates(StatesGroup):
    waiting_for_sleep_time = State()


storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()


@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî HabitQuest, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ó–û–ñ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


@dp.message(Command("sleep"))
async def handle_sleep_command(message: Message, state: FSMContext):
    await handle_sleep(message, state)


@dp.message(Command("train"))
async def handle_train_command(message: Message):
    await handle_train(message)


@dp.message(Command("mytrainings"))
async def handle_my_trainings(message: Message):
    await handle_my_trainings_button(message)


@dp.message(F.text == "üõå –°–æ–Ω")
async def handle_sleep(message: Message):
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ñ–µ–ª–∞—é —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ üò¥")
    await set_sleep_reminder(message)


@dp.message(SleepStates.waiting_for_sleep_time)
async def process_sleep_time(message: Message, state: FSMContext):
    await set_sleep_reminder(message, message.text)
    await state.clear()


@dp.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def handle_train(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=workout_levels_keyboard()
    )


@dp.message(F.text == "‚ÑπÔ∏è –°–æ–≤–µ—Ç")
async def handle_advice(message: Message):
    advice = get_sleep_advice()
    await message.answer(f"–°–æ–≤–µ—Ç –ø–æ —Å–Ω—É: {advice}")


@dp.message(F.text == "üìñ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def handle_my_trainings_button(message: Message):
    workouts = get_user_workouts(message.from_user.id)

    if not workouts:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí§")
        return

    response = "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for date, level, exercises in workouts:
        response += f"üìÖ {date}\nüî∏ –£—Ä–æ–≤–µ–Ω—å: {level.title()}\nüìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n{exercises}\n\n"

    await message.answer(response.strip())


@dp.callback_query(F.data.startswith("level_"))
async def handle_level_callback(callback: CallbackQuery):
    level_mapping = {
        "level_easy": "–ª—ë–≥–∫–∞—è",
        "level_medium": "—Å—Ä–µ–¥–Ω—è—è",
        "level_hard": "—Ç—è–∂—ë–ª–∞—è"
    }
    selected_level = level_mapping.get(callback.data)
    workout = generate_workout(level=selected_level)

    save_workout(
        user_id=callback.from_user.id,
        level=selected_level,
        exercises=workout
    )

    await callback.message.answer(f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({selected_level.title()}):\n{workout}")
    await callback.answer()


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    asyncio.run(main())
