# sleep/reminders.py
from aiogram import Bot
from aiogram.types import Message
from datetime import datetime, timedelta
from src.scheduler import scheduler
from config import TOKEN


async def send_sleep_alert(chat_id: int):
    bot = Bot(token=TOKEN)
    await bot.send_message(chat_id, "–ü–æ—Ä–∞ —Å–ø–∞—Ç—å! üò¥")
    await bot.session.close()

async def set_sleep_reminder(message: Message, time_str: str = None):
    """
    –ï—Å–ª–∏ time_str –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥).
    –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º HH:MM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    now = datetime.now()
    if not time_str:
        run_dt = now + timedelta(seconds=10)
    else:
        try:
            t = datetime.strptime(time_str, "%H:%M").time()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            return
        run_dt = datetime.combine(now.date(), t)
        if run_dt <= now:
            run_dt += timedelta(days=1)

    job_id = f"sleep_{message.chat.id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)

    scheduler.add_job(
        send_sleep_alert,
        trigger="date",
        run_date=run_dt,
        args=[message.chat.id],
        id=job_id,
    )
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ {run_dt.strftime('%H:%M ‚Äî %d.%m.%Y')}")